name: System Verification

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  verify:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: turismo
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Install Backend Dependencies
      run: |
        pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run Backend Migrations
      run: python backend/manage.py migrate
      env:
        SECRET_KEY: "temp_secret_for_ci"
        DB_NAME: turismo
        DB_USER: admin
        DB_PASSWORD: admin
        DB_HOST: localhost
        DB_PORT: 5432

    - name: Run Backend Tests
      run: python backend/manage.py test
      env:
        SECRET_KEY: "temp_secret_for_ci"
        DB_NAME: turismo
        DB_USER: admin
        DB_PASSWORD: admin
        DB_HOST: localhost
        DB_PORT: 5432

    - name: Set up Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Frontend Dependencies
      run: npm install --prefix frontend

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps --prefix frontend

    - name: Start Backend Server
      run: python backend/manage.py runserver &
      env:
        SECRET_KEY: "temp_secret_for_ci"
        DB_NAME: turismo
        DB_USER: admin
        DB_PASSWORD: admin
        DB_HOST: localhost
        DB_PORT: 5432

    - name: Start Frontend Server
      run: npm run dev --prefix frontend &

    - name: Wait for Servers to be ready
      run: |
        echo "Waiting for backend..."
        while ! nc -z localhost 8000; do
          sleep 1
        done
        echo "Backend is up."
        echo "Waiting for frontend..."
        while ! nc -z localhost 3000; do
          sleep 1
        done
        echo "Frontend is up."

    - name: Run Playwright E2E Tests
      run: npx playwright test --config frontend/playwright.config.ts

    - name: Run Frontend Unit Tests
      run: npm test --prefix frontend
      # This is run after e2e to ensure servers are stopped if it fails
      # A better approach would be to have separate jobs for unit and e2e tests.

    - name: Stop Servers
      if: always()
      run: |
        kill $(lsof -t -i:8000) || true
        kill $(lsof -t -i:3000) || true