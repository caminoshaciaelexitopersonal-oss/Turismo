# Generated by Django 5.2.6 on 2025-10-02 10:53

import api.fields
import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoriaPrestador",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
                ("nombre_es", models.CharField(max_length=100, null=True, unique=True)),
                ("nombre_en", models.CharField(max_length=100, null=True, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Versión del nombre amigable para URLs",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Categoría de Prestador",
                "verbose_name_plural": "Categorías de Prestadores",
            },
        ),
        migrations.CreateModel(
            name="ConsejoConsultivo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titulo", models.CharField(max_length=255)),
                ("titulo_es", models.CharField(max_length=255, null=True)),
                ("titulo_en", models.CharField(max_length=255, null=True)),
                ("contenido", models.TextField()),
                ("contenido_es", models.TextField(null=True)),
                ("contenido_en", models.TextField(null=True)),
                ("fecha_publicacion", models.DateField()),
                (
                    "documento_adjunto",
                    models.FileField(
                        blank=True,
                        help_text="Documento opcional (PDF, Word, etc.)",
                        null=True,
                        upload_to="consejo_consultivo/",
                    ),
                ),
                (
                    "es_publicado",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar para que el contenido sea visible en el sitio web público.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Publicación del Consejo Consultivo",
                "verbose_name_plural": "Publicaciones del Consejo Consultivo",
                "ordering": ["-fecha_publicacion"],
            },
        ),
        migrations.CreateModel(
            name="HechoHistorico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ano", models.IntegerField(verbose_name="Año del Acontecimiento")),
                (
                    "titulo",
                    models.CharField(max_length=200, verbose_name="Título del Hecho"),
                ),
                (
                    "titulo_es",
                    models.CharField(
                        max_length=200, null=True, verbose_name="Título del Hecho"
                    ),
                ),
                (
                    "titulo_en",
                    models.CharField(
                        max_length=200, null=True, verbose_name="Título del Hecho"
                    ),
                ),
                ("descripcion", models.TextField(verbose_name="Descripción")),
                (
                    "descripcion_es",
                    models.TextField(null=True, verbose_name="Descripción"),
                ),
                (
                    "descripcion_en",
                    models.TextField(null=True, verbose_name="Descripción"),
                ),
                (
                    "imagen",
                    models.ImageField(
                        blank=True,
                        help_text="Imagen opcional para ilustrar el hecho histórico.",
                        null=True,
                        upload_to=api.models.hecho_historico_directory_path,
                        verbose_name="Imagen Ilustrativa",
                    ),
                ),
                (
                    "es_publicado",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar para que sea visible en la línea de tiempo pública.",
                        verbose_name="Publicado",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Hecho Histórico",
                "verbose_name_plural": "Hechos Históricos",
                "ordering": ["ano"],
            },
        ),
        migrations.CreateModel(
            name="HomePageComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "component_type",
                    models.CharField(
                        choices=[
                            ("BANNER", "Banner Principal"),
                            ("SLIDER", "Slider Secundario"),
                            ("CARD", "Tarjeta de Información"),
                        ],
                        default="BANNER",
                        max_length=20,
                        verbose_name="Tipo de Componente",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Título")),
                (
                    "subtitle",
                    models.CharField(
                        blank=True, max_length=300, null=True, verbose_name="Subtítulo"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Imagen principal para el componente.",
                        upload_to=api.models.homepage_component_directory_path,
                        verbose_name="Imagen",
                    ),
                ),
                (
                    "link_url",
                    models.URLField(
                        blank=True,
                        help_text="El enlace al que dirigirá el componente al hacer clic.",
                        null=True,
                        verbose_name="URL de Destino",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Orden de visualización (0 primero, 1 después...).",
                        verbose_name="Orden",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Marcar para que el componente sea visible en la página de inicio.",
                        verbose_name="Activo",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Componente de Página de Inicio",
                "verbose_name_plural": "Componentes de Página de Inicio",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="RubroArtesano",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
                ("nombre_es", models.CharField(max_length=100, null=True, unique=True)),
                ("nombre_en", models.CharField(max_length=100, null=True, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Versión del nombre amigable para URLs",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Rubro de Artesano",
                "verbose_name_plural": "Rubros de Artesanos",
            },
        ),
        migrations.CreateModel(
            name="ScoringRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "puntos_asistencia_capacitacion",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Puntos otorgados por cada asistencia a una capacitación.",
                    ),
                ),
                (
                    "puntos_por_estrella_reseña",
                    models.PositiveIntegerField(
                        default=2,
                        help_text="Puntos a multiplicar por cada estrella en una reseña aprobada (ej. 5 estrellas = 5 * 2 = 10 puntos).",
                    ),
                ),
                (
                    "puntos_completar_formulario",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="Puntos otorgados por cada formulario de caracterización completado.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reglas de Puntuación",
                "verbose_name_plural": "Reglas de Puntuación",
            },
        ),
        migrations.CreateModel(
            name="SiteConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre_secretaria",
                    models.CharField(
                        blank=True,
                        default="Secretaría de Turismo y Desarrollo Económico",
                        max_length=150,
                        verbose_name="Nombre de la Secretaría",
                    ),
                ),
                (
                    "nombre_direccion",
                    models.CharField(
                        blank=True,
                        default="Dirección de Turismo",
                        max_length=150,
                        verbose_name="Nombre de la Dirección",
                    ),
                ),
                (
                    "logo",
                    models.FileField(
                        blank=True,
                        help_text="Logo principal que aparece en la cabecera. Preferiblemente en formato SVG.",
                        null=True,
                        upload_to=api.models.site_config_directory_path,
                        verbose_name="Logo del Sitio",
                    ),
                ),
                (
                    "direccion",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Dirección"
                    ),
                ),
                (
                    "horario_atencion",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Horario de Atención"
                    ),
                ),
                (
                    "telefono_conmutador",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Teléfono Conmutador"
                    ),
                ),
                (
                    "telefono_movil",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Teléfono Móvil"
                    ),
                ),
                (
                    "linea_gratuita",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name="Línea de Atención Gratuita",
                    ),
                ),
                (
                    "linea_anticorrupcion",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Línea Anticorrupción"
                    ),
                ),
                (
                    "correo_institucional",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Correo Institucional"
                    ),
                ),
                (
                    "correo_notificaciones",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="Correo de Notificaciones Judiciales",
                    ),
                ),
                (
                    "social_facebook",
                    models.URLField(blank=True, verbose_name="Facebook URL"),
                ),
                (
                    "social_twitter",
                    models.URLField(blank=True, verbose_name="Twitter URL"),
                ),
                (
                    "social_youtube",
                    models.URLField(blank=True, verbose_name="YouTube URL"),
                ),
                (
                    "social_instagram",
                    models.URLField(blank=True, verbose_name="Instagram URL"),
                ),
                (
                    "seccion_publicaciones_activa",
                    models.BooleanField(
                        default=True,
                        help_text="Marcar para mostrar la sección de publicaciones en el sitio web.",
                        verbose_name="Sección de Publicaciones (Eventos/Noticias) Activa",
                    ),
                ),
                (
                    "seccion_atractivos_activa",
                    models.BooleanField(
                        default=True,
                        help_text="Marcar para mostrar la sección de atractivos turísticos.",
                        verbose_name="Sección de Atractivos Turísticos Activa",
                    ),
                ),
                (
                    "seccion_prestadores_activa",
                    models.BooleanField(
                        default=True,
                        help_text="Marcar para mostrar el directorio de prestadores de servicios.",
                        verbose_name="Sección de Prestadores de Servicios Activa",
                    ),
                ),
                (
                    "google_maps_api_key",
                    api.fields.EncryptedTextField(
                        blank=True,
                        help_text="Clave de API de Google Maps para todo el sitio.",
                        null=True,
                        verbose_name="Google Maps API Key",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuración del Sitio",
                "verbose_name_plural": "Configuración del Sitio",
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titulo", models.CharField(max_length=200)),
                ("titulo_es", models.CharField(max_length=200, null=True)),
                ("titulo_en", models.CharField(max_length=200, null=True)),
                ("descripcion", models.TextField(blank=True)),
                ("descripcion_es", models.TextField(blank=True, null=True)),
                ("descripcion_en", models.TextField(blank=True, null=True)),
                ("url_youtube", models.URLField()),
                ("fecha_publicacion", models.DateTimeField(auto_now_add=True)),
                (
                    "es_publicado",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar para que el video sea visible en el sitio web público.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrador General"),
                            ("FUNCIONARIO_DIRECTIVO", "Funcionario Directivo"),
                            ("FUNCIONARIO_PROFESIONAL", "Funcionario Profesional"),
                            ("PRESTADOR", "Prestador de Servicio"),
                            ("ARTESANO", "Artesano"),
                            (
                                "CONSEJO_CONSULTIVO_TURISMO",
                                "Consejo Consultivo de Turismo",
                            ),
                            ("TURISTA", "Turista"),
                        ],
                        max_length=50,
                        verbose_name="Rol",
                    ),
                ),
                (
                    "openai_api_key",
                    api.fields.EncryptedTextField(
                        blank=True, null=True, verbose_name="OpenAI API Key"
                    ),
                ),
                (
                    "google_api_key",
                    api.fields.EncryptedTextField(
                        blank=True, null=True, verbose_name="Google API Key"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AgentTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "command",
                    models.TextField(
                        help_text="El comando en lenguaje natural que inició la tarea.",
                        verbose_name="Comando del Usuario",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pendiente"),
                            ("RUNNING", "En Ejecución"),
                            ("COMPLETED", "Completada"),
                            ("FAILED", "Fallida"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                        verbose_name="Estado de la Tarea",
                    ),
                ),
                (
                    "report",
                    models.TextField(
                        blank=True,
                        help_text="El informe final generado por el agente al completar la tarea.",
                        null=True,
                        verbose_name="Informe Final",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agent_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tarea de Agente",
                "verbose_name_plural": "Tareas de Agentes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Artesano",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre_taller",
                    models.CharField(
                        help_text="Nombre del taller o marca personal del artesano.",
                        max_length=200,
                    ),
                ),
                (
                    "nombre_artesano",
                    models.CharField(
                        help_text="Nombre completo del artesano.", max_length=200
                    ),
                ),
                ("descripcion", models.TextField(blank=True, null=True)),
                ("descripcion_es", models.TextField(blank=True, null=True)),
                ("descripcion_en", models.TextField(blank=True, null=True)),
                ("telefono", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "email_contacto",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "foto_principal",
                    models.ImageField(
                        blank=True,
                        help_text="Una foto representativa del artesano o sus productos.",
                        null=True,
                        upload_to=api.models.artesano_directory_path,
                    ),
                ),
                ("red_social_facebook", models.URLField(blank=True, null=True)),
                ("red_social_instagram", models.URLField(blank=True, null=True)),
                ("red_social_tiktok", models.URLField(blank=True, null=True)),
                (
                    "red_social_whatsapp",
                    models.CharField(
                        blank=True,
                        help_text="Número de WhatsApp con código de país",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ubicacion_taller",
                    models.CharField(
                        blank=True,
                        help_text="Dirección o punto de referencia del taller o punto de venta.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "aprobado",
                    models.BooleanField(
                        default=False,
                        help_text="El administrador debe aprobar este perfil para que sea visible.",
                    ),
                ),
                (
                    "puntuacion_capacitacion",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje acumulado por asistencia a capacitaciones.",
                    ),
                ),
                (
                    "puntuacion_reseñas",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje acumulado por reseñas de turistas.",
                    ),
                ),
                (
                    "puntuacion_formularios",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje por completar formularios de caracterización.",
                    ),
                ),
                (
                    "puntuacion_total",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Puntaje total para posicionamiento. Se calcula automáticamente.",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil_artesano",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rubro",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="artesanos",
                        to="api.rubroartesano",
                    ),
                ),
            ],
            options={
                "verbose_name": "Artesano",
                "verbose_name_plural": "Artesanos",
            },
        ),
        migrations.CreateModel(
            name="AtractivoTuristico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=200, unique=True)),
                ("nombre_es", models.CharField(max_length=200, null=True, unique=True)),
                ("nombre_en", models.CharField(max_length=200, null=True, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Versión del nombre amigable para URLs",
                        max_length=220,
                        unique=True,
                    ),
                ),
                ("descripcion", models.TextField()),
                ("descripcion_es", models.TextField(null=True)),
                ("descripcion_en", models.TextField(null=True)),
                (
                    "como_llegar",
                    models.TextField(
                        help_text="Instrucciones sobre cómo llegar al atractivo."
                    ),
                ),
                (
                    "como_llegar_es",
                    models.TextField(
                        help_text="Instrucciones sobre cómo llegar al atractivo.",
                        null=True,
                    ),
                ),
                (
                    "como_llegar_en",
                    models.TextField(
                        help_text="Instrucciones sobre cómo llegar al atractivo.",
                        null=True,
                    ),
                ),
                (
                    "ubicacion_mapa",
                    models.CharField(
                        blank=True,
                        help_text="Coordenadas (lat,lng) para Google Maps",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "categoria_color",
                    models.CharField(
                        choices=[
                            ("AMARILLO", "Cultural/Histórico"),
                            ("ROJO", "Urbano/Parque"),
                            ("BLANCO", "Natural"),
                        ],
                        max_length=10,
                        verbose_name="Categoría de Color",
                    ),
                ),
                (
                    "imagen_principal",
                    models.ImageField(
                        blank=True,
                        help_text="Imagen principal que se mostrará en listados y cabeceras.",
                        null=True,
                        upload_to=api.models.atractivo_directory_path,
                    ),
                ),
                (
                    "horario_funcionamiento",
                    models.TextField(
                        blank=True,
                        help_text="Ej: Lunes a Viernes de 9am a 5pm. Fines de semana de 10am a 6pm.",
                        verbose_name="Horario de Funcionamiento",
                    ),
                ),
                (
                    "horario_funcionamiento_es",
                    models.TextField(
                        blank=True,
                        help_text="Ej: Lunes a Viernes de 9am a 5pm. Fines de semana de 10am a 6pm.",
                        null=True,
                        verbose_name="Horario de Funcionamiento",
                    ),
                ),
                (
                    "horario_funcionamiento_en",
                    models.TextField(
                        blank=True,
                        help_text="Ej: Lunes a Viernes de 9am a 5pm. Fines de semana de 10am a 6pm.",
                        null=True,
                        verbose_name="Horario de Funcionamiento",
                    ),
                ),
                (
                    "tarifas",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre precios de entrada. Ej: Adultos: $10, Niños: $5, Grupos: 10% de descuento.",
                        verbose_name="Tarifas",
                    ),
                ),
                (
                    "tarifas_es",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre precios de entrada. Ej: Adultos: $10, Niños: $5, Grupos: 10% de descuento.",
                        null=True,
                        verbose_name="Tarifas",
                    ),
                ),
                (
                    "tarifas_en",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre precios de entrada. Ej: Adultos: $10, Niños: $5, Grupos: 10% de descuento.",
                        null=True,
                        verbose_name="Tarifas",
                    ),
                ),
                (
                    "recomendaciones",
                    models.TextField(
                        blank=True,
                        help_text="Sugerencias para los visitantes. Ej: Llevar ropa cómoda, protector solar, agua.",
                        verbose_name="Recomendaciones",
                    ),
                ),
                (
                    "recomendaciones_es",
                    models.TextField(
                        blank=True,
                        help_text="Sugerencias para los visitantes. Ej: Llevar ropa cómoda, protector solar, agua.",
                        null=True,
                        verbose_name="Recomendaciones",
                    ),
                ),
                (
                    "recomendaciones_en",
                    models.TextField(
                        blank=True,
                        help_text="Sugerencias para los visitantes. Ej: Llevar ropa cómoda, protector solar, agua.",
                        null=True,
                        verbose_name="Recomendaciones",
                    ),
                ),
                (
                    "accesibilidad",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre acceso para personas con movilidad reducida, rampas, etc.",
                        verbose_name="Accesibilidad",
                    ),
                ),
                (
                    "accesibilidad_es",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre acceso para personas con movilidad reducida, rampas, etc.",
                        null=True,
                        verbose_name="Accesibilidad",
                    ),
                ),
                (
                    "accesibilidad_en",
                    models.TextField(
                        blank=True,
                        help_text="Información sobre acceso para personas con movilidad reducida, rampas, etc.",
                        null=True,
                        verbose_name="Accesibilidad",
                    ),
                ),
                (
                    "informacion_contacto",
                    models.TextField(
                        blank=True,
                        help_text="Teléfonos, correos electrónicos o persona de contacto.",
                        verbose_name="Información de Contacto",
                    ),
                ),
                (
                    "informacion_contacto_es",
                    models.TextField(
                        blank=True,
                        help_text="Teléfonos, correos electrónicos o persona de contacto.",
                        null=True,
                        verbose_name="Información de Contacto",
                    ),
                ),
                (
                    "informacion_contacto_en",
                    models.TextField(
                        blank=True,
                        help_text="Teléfonos, correos electrónicos o persona de contacto.",
                        null=True,
                        verbose_name="Información de Contacto",
                    ),
                ),
                (
                    "es_publicado",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar para que el atractivo sea visible en el sitio web público.",
                        verbose_name="Publicado",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "autor",
                    models.ForeignKey(
                        help_text="Usuario que creó el registro (Funcionario, Guía, etc.).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Atractivo Turístico",
                "verbose_name_plural": "Atractivos Turísticos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("USER_CREATE", "Usuario Creado"),
                            ("USER_UPDATE", "Usuario Actualizado"),
                            ("USER_DELETE", "Usuario Eliminado"),
                            ("MENU_CREATE", "Elemento de Menú Creado"),
                            ("MENU_UPDATE", "Elemento de Menú Actualizado"),
                            ("MENU_DELETE", "Elemento de Menú Eliminado"),
                            (
                                "SITE_CONFIG_UPDATE",
                                "Configuración del Sitio Actualizada",
                            ),
                            ("COMPONENT_CREATE", "Componente de Inicio Creado"),
                            ("COMPONENT_UPDATE", "Componente de Inicio Actualizado"),
                            ("COMPONENT_DELETE", "Componente de Inicio Eliminado"),
                            ("COMPONENT_REORDER", "Componentes de Inicio Reordenados"),
                            ("CONTENIDO_CREATE", "Contenido de Municipio Creado"),
                            ("CONTENIDO_UPDATE", "Contenido de Municipio Actualizado"),
                            ("CONTENIDO_DELETE", "Contenido de Municipio Eliminado"),
                        ],
                        db_index=True,
                        max_length=50,
                        verbose_name="Acción",
                    ),
                ),
                (
                    "details",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada de la acción o los datos cambiados (ej. en formato JSON).",
                        null=True,
                        verbose_name="Detalles",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="Fecha y Hora"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Auditoría",
                "verbose_name_plural": "Registros de Auditoría",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ContenidoMunicipio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "seccion",
                    models.CharField(
                        choices=[
                            ("INTRODUCCION", "Introducción General"),
                            ("UBICACION_CLIMA", "Ubicación y Clima"),
                            ("ALOJAMIENTO", "Alojamiento y Hotelería"),
                            ("COMO_LLEGAR", "¿Cómo Llegar?"),
                            ("CONTACTOS", "Contactos de Interés"),
                            ("FINANZAS", "Entidades Financieras"),
                            (
                                "SECRETARIA_TURISMO",
                                "Secretaría de Turismo y Desarrollo Económico",
                            ),
                            (
                                "DIRECTORIO_FUNCIONARIOS",
                                "Directorio - Funcionarios y Dependencias",
                            ),
                            ("DIRECTORIO_ENLACES", "Directorio - Enlaces de Interés"),
                            ("OTRA", "Otra Sección"),
                        ],
                        help_text="Agrupa el contenido bajo una categoría temática.",
                        max_length=50,
                        verbose_name="Sección Temática",
                    ),
                ),
                (
                    "titulo",
                    models.CharField(
                        help_text="El título principal que se mostrará para este bloque de contenido.",
                        max_length=255,
                        verbose_name="Título del Bloque",
                    ),
                ),
                (
                    "titulo_es",
                    models.CharField(
                        help_text="El título principal que se mostrará para este bloque de contenido.",
                        max_length=255,
                        null=True,
                        verbose_name="Título del Bloque",
                    ),
                ),
                (
                    "titulo_en",
                    models.CharField(
                        help_text="El título principal que se mostrará para este bloque de contenido.",
                        max_length=255,
                        null=True,
                        verbose_name="Título del Bloque",
                    ),
                ),
                (
                    "contenido",
                    models.TextField(
                        help_text="El contenido principal. Se recomienda usar formato Markdown para el texto.",
                        verbose_name="Contenido del Bloque",
                    ),
                ),
                (
                    "contenido_es",
                    models.TextField(
                        help_text="El contenido principal. Se recomienda usar formato Markdown para el texto.",
                        null=True,
                        verbose_name="Contenido del Bloque",
                    ),
                ),
                (
                    "contenido_en",
                    models.TextField(
                        help_text="El contenido principal. Se recomienda usar formato Markdown para el texto.",
                        null=True,
                        verbose_name="Contenido del Bloque",
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Define el orden de aparición de los bloques en la página (0 primero, 1 después, etc.).",
                    ),
                ),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "es_publicado",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar para que el contenido sea visible en el sitio web público.",
                    ),
                ),
                (
                    "actualizado_por",
                    models.ForeignKey(
                        blank=True,
                        help_text="Último usuario que modificó este contenido.",
                        limit_choices_to={
                            "role__in": [
                                "ADMIN",
                                "FUNCIONARIO_DIRECTIVO",
                                "FUNCIONARIO_PROFESIONAL",
                            ]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Contenido del Municipio",
                "verbose_name_plural": "Contenidos del Municipio",
                "ordering": ["orden", "titulo"],
            },
        ),
        migrations.CreateModel(
            name="Formulario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "titulo",
                    models.CharField(
                        blank=True,
                        help_text="Campo opcional: título amigable. Si está vacío, se usará 'nombre'.",
                        max_length=255,
                    ),
                ),
                ("descripcion", models.TextField(blank=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="El ID de la entidad específica a la que se asocia.",
                        null=True,
                    ),
                ),
                (
                    "es_publico",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el formulario es visible para los prestadores.",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="El tipo de entidad al que se asocia este formulario.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "creado_por",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que creó el formulario (puede ser null si se importó/seed).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="formularios_creados",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Formulario Dinámico",
                "verbose_name_plural": "Formularios Dinámicos",
                "unique_together": {("nombre", "content_type", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="ImagenArtesano",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "imagen",
                    models.ImageField(
                        upload_to=api.models.galeria_artesano_directory_path
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Texto alternativo para accesibilidad",
                        max_length=255,
                    ),
                ),
                (
                    "artesano",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="galeria_imagenes",
                        to="api.artesano",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImagenAtractivo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "imagen",
                    models.ImageField(upload_to=api.models.atractivo_directory_path),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Texto alternativo para accesibilidad y SEO",
                        max_length=255,
                    ),
                ),
                (
                    "atractivo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="imagenes",
                        to="api.atractivoturistico",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MenuItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(max_length=100, verbose_name="Nombre del Enlace"),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="Ruta interna (ej: /quienes-somos) o URL completa (ej: https://...).",
                        max_length=255,
                        verbose_name="URL o Ruta",
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Orden de aparición (0 primero, 1 después, etc.).",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Dejar en blanco si es un elemento del menú principal.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="api.menuitem",
                        verbose_name="Menú Padre",
                    ),
                ),
            ],
            options={
                "verbose_name": "Elemento de Menú",
                "verbose_name_plural": "Elementos de Menú",
                "ordering": ["orden"],
            },
        ),
        migrations.CreateModel(
            name="Notificacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mensaje",
                    models.CharField(
                        help_text="El texto de la notificación.", max_length=255
                    ),
                ),
                (
                    "leido",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Indica si el usuario ha leído la notificación.",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                (
                    "url",
                    models.CharField(
                        blank=True,
                        help_text="URL a la que se redirige al hacer clic.",
                        max_length=500,
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        help_text="El usuario que recibe la notificación.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notificaciones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notificación",
                "verbose_name_plural": "Notificaciones",
                "ordering": ["-fecha_creacion"],
            },
        ),
        migrations.CreateModel(
            name="PaginaInstitucional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        max_length=150, unique=True, verbose_name="Nombre de la Página"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Identificador único para la URL. Ej: secretaria-turismo",
                        max_length=150,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "titulo_banner",
                    models.CharField(
                        help_text="Título principal que se superpone en el banner.",
                        max_length=200,
                        verbose_name="Título del Banner",
                    ),
                ),
                (
                    "titulo_banner_es",
                    models.CharField(
                        help_text="Título principal que se superpone en el banner.",
                        max_length=200,
                        null=True,
                        verbose_name="Título del Banner",
                    ),
                ),
                (
                    "titulo_banner_en",
                    models.CharField(
                        help_text="Título principal que se superpone en el banner.",
                        max_length=200,
                        null=True,
                        verbose_name="Título del Banner",
                    ),
                ),
                (
                    "subtitulo_banner",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Subtítulo del Banner",
                    ),
                ),
                (
                    "subtitulo_banner_es",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Subtítulo del Banner",
                    ),
                ),
                (
                    "subtitulo_banner_en",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Subtítulo del Banner",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        help_text="Imagen principal que se mostrará en la parte superior de la página.",
                        upload_to=api.models.pagina_institucional_banner_path,
                        verbose_name="Imagen de Banner",
                    ),
                ),
                (
                    "contenido_principal",
                    models.TextField(
                        blank=True,
                        help_text="Acepta formato Markdown.",
                        verbose_name="Contenido Principal (Objetivos y Funciones)",
                    ),
                ),
                (
                    "contenido_principal_es",
                    models.TextField(
                        blank=True,
                        help_text="Acepta formato Markdown.",
                        null=True,
                        verbose_name="Contenido Principal (Objetivos y Funciones)",
                    ),
                ),
                (
                    "contenido_principal_en",
                    models.TextField(
                        blank=True,
                        help_text="Acepta formato Markdown.",
                        null=True,
                        verbose_name="Contenido Principal (Objetivos y Funciones)",
                    ),
                ),
                (
                    "programas_proyectos",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        verbose_name="Programas y Proyectos",
                    ),
                ),
                (
                    "programas_proyectos_es",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Programas y Proyectos",
                    ),
                ),
                (
                    "programas_proyectos_en",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Programas y Proyectos",
                    ),
                ),
                (
                    "estrategias_apoyo",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        verbose_name="Estrategias de Apoyo",
                    ),
                ),
                (
                    "estrategias_apoyo_es",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Estrategias de Apoyo",
                    ),
                ),
                (
                    "estrategias_apoyo_en",
                    models.TextField(
                        blank=True,
                        help_text="Para la Secretaría. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Estrategias de Apoyo",
                    ),
                ),
                (
                    "politicas_locales",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        verbose_name="Políticas Locales de Turismo",
                    ),
                ),
                (
                    "politicas_locales_es",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Políticas Locales de Turismo",
                    ),
                ),
                (
                    "politicas_locales_en",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Políticas Locales de Turismo",
                    ),
                ),
                (
                    "convenios_asociaciones",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        verbose_name="Convenios y Asociaciones",
                    ),
                ),
                (
                    "convenios_asociaciones_es",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Convenios y Asociaciones",
                    ),
                ),
                (
                    "convenios_asociaciones_en",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Convenios y Asociaciones",
                    ),
                ),
                (
                    "informes_resultados",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        verbose_name="Informes de Resultados",
                    ),
                ),
                (
                    "informes_resultados_es",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Informes de Resultados",
                    ),
                ),
                (
                    "informes_resultados_en",
                    models.TextField(
                        blank=True,
                        help_text="Para la Dirección. Acepta formato Markdown.",
                        null=True,
                        verbose_name="Informes de Resultados",
                    ),
                ),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "actualizado_por",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            "role__in": [
                                "ADMIN",
                                "FUNCIONARIO_DIRECTIVO",
                                "FUNCIONARIO_PROFESIONAL",
                            ]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Página Institucional",
                "verbose_name_plural": "Páginas Institucionales",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="PlantillaVerificacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        help_text="Nombre único para la plantilla, ej: 'Verificación para Guías de Turismo'",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "descripcion",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada de la finalidad de esta plantilla.",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "categoria_prestador",
                    models.ForeignKey(
                        blank=True,
                        help_text="Asocia esta plantilla a una categoría de prestador específica (opcional).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="plantillas_verificacion",
                        to="api.categoriaprestador",
                    ),
                ),
                (
                    "creado_por",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="plantillas_creadas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Plantilla de Verificación",
                "verbose_name_plural": "Plantillas de Verificación",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="ItemVerificacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "texto_requisito",
                    models.CharField(
                        help_text="El texto del requisito a verificar.", max_length=500
                    ),
                ),
                (
                    "puntaje",
                    models.PositiveIntegerField(
                        default=1, help_text="Puntos que otorga este ítem si se cumple."
                    ),
                ),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0, help_text="Orden del ítem en la plantilla."
                    ),
                ),
                (
                    "es_obligatorio",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si este ítem es fundamental para la evaluación.",
                    ),
                ),
                (
                    "plantilla",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="api.plantillaverificacion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ítem de Verificación",
                "verbose_name_plural": "Ítems de Verificación",
                "ordering": ["orden"],
            },
        ),
        migrations.CreateModel(
            name="Pregunta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("texto_pregunta", models.CharField(max_length=500)),
                (
                    "tipo_pregunta",
                    models.CharField(
                        choices=[
                            ("TEXTO_CORTO", "Texto Corto"),
                            ("TEXTO_LARGO", "Texto Largo"),
                            ("NUMERO", "Número"),
                            ("FECHA", "Fecha"),
                            ("SELECCION_UNICA", "Selección Única"),
                            ("SELECCION_MULTIPLE", "Selección Múltiple"),
                            ("CHECKBOX", "Casilla de Verificación (Sí/No)"),
                            ("EMAIL", "Correo Electrónico"),
                            ("URL", "Enlace (URL)"),
                        ],
                        max_length=50,
                    ),
                ),
                ("es_requerida", models.BooleanField(default=False)),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0, help_text="Orden de la pregunta en el formulario"
                    ),
                ),
                (
                    "ayuda",
                    models.CharField(
                        blank=True,
                        help_text="Texto de ayuda/placeholder para quien responde",
                        max_length=255,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Identificador único opcional para la pregunta (útil al guardar respuestas)",
                        max_length=255,
                    ),
                ),
                (
                    "formulario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preguntas",
                        to="api.formulario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pregunta de Formulario",
                "verbose_name_plural": "Preguntas de Formulario",
                "ordering": ["orden"],
            },
        ),
        migrations.CreateModel(
            name="OpcionRespuesta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("texto_opcion", models.CharField(max_length=255)),
                (
                    "orden",
                    models.PositiveIntegerField(
                        default=0, help_text="Orden de la opción en la pregunta"
                    ),
                ),
                (
                    "valor_interno",
                    models.CharField(
                        blank=True,
                        help_text="Valor interno (opcional) para almacenamiento",
                        max_length=255,
                    ),
                ),
                (
                    "pregunta",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="opciones",
                        to="api.pregunta",
                    ),
                ),
            ],
            options={
                "verbose_name": "Opción de Respuesta",
                "verbose_name_plural": "Opciones de Respuesta",
                "ordering": ["orden"],
            },
        ),
        migrations.CreateModel(
            name="PrestadorServicio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre_negocio", models.CharField(max_length=200)),
                ("descripcion", models.TextField(blank=True, null=True)),
                ("descripcion_es", models.TextField(blank=True, null=True)),
                ("descripcion_en", models.TextField(blank=True, null=True)),
                ("telefono", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "email_contacto",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("red_social_facebook", models.URLField(blank=True, null=True)),
                ("red_social_instagram", models.URLField(blank=True, null=True)),
                ("red_social_tiktok", models.URLField(blank=True, null=True)),
                (
                    "red_social_whatsapp",
                    models.CharField(
                        blank=True,
                        help_text="Número de WhatsApp con código de país",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ubicacion_mapa",
                    models.CharField(
                        blank=True,
                        help_text="Coordenadas (lat,lng) o dirección",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "promociones_ofertas",
                    models.TextField(
                        blank=True,
                        help_text="Detalles de promociones, menús, paquetes, etc.",
                        null=True,
                    ),
                ),
                (
                    "promociones_ofertas_es",
                    models.TextField(
                        blank=True,
                        help_text="Detalles de promociones, menús, paquetes, etc.",
                        null=True,
                    ),
                ),
                (
                    "promociones_ofertas_en",
                    models.TextField(
                        blank=True,
                        help_text="Detalles de promociones, menús, paquetes, etc.",
                        null=True,
                    ),
                ),
                (
                    "aprobado",
                    models.BooleanField(
                        default=False,
                        help_text="El administrador debe aprobar este perfil para que sea visible.",
                    ),
                ),
                (
                    "reporte_ocupacion_nacional",
                    models.PositiveIntegerField(
                        default=0, help_text="Exclusivo para hoteles"
                    ),
                ),
                (
                    "reporte_ocupacion_internacional",
                    models.PositiveIntegerField(
                        default=0, help_text="Exclusivo para hoteles"
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "puntuacion_verificacion",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje acumulado de verificaciones de cumplimiento.",
                    ),
                ),
                (
                    "puntuacion_capacitacion",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje acumulado por asistencia a capacitaciones.",
                    ),
                ),
                (
                    "puntuacion_reseñas",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje acumulado por reseñas de turistas.",
                    ),
                ),
                (
                    "puntuacion_formularios",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje por completar formularios de caracterización.",
                    ),
                ),
                (
                    "puntuacion_total",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Puntaje total para posicionamiento. Se calcula automáticamente.",
                    ),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="prestadores",
                        to="api.categoriaprestador",
                    ),
                ),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil_prestador",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Prestador de Servicio",
                "verbose_name_plural": "Prestadores de Servicios",
            },
        ),
        migrations.CreateModel(
            name="ImagenGaleria",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "imagen",
                    models.ImageField(upload_to=api.models.galeria_directory_path),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Texto alternativo para accesibilidad",
                        max_length=255,
                    ),
                ),
                (
                    "prestador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="galeria_imagenes",
                        to="api.prestadorservicio",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentoLegalizacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "documento",
                    models.FileField(upload_to=api.models.documentos_directory_path),
                ),
                ("nombre_documento", models.CharField(max_length=100)),
                ("fecha_subida", models.DateTimeField(auto_now_add=True)),
                (
                    "prestador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documentos_legalizacion",
                        to="api.prestadorservicio",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Publicacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("EVENTO", "Evento"),
                            ("NOTICIA", "Noticia"),
                            ("BLOG", "Blog"),
                            ("CAPACITACION", "Capacitación"),
                        ],
                        max_length=20,
                    ),
                ),
                ("titulo", models.CharField(max_length=200)),
                ("titulo_es", models.CharField(max_length=200, null=True)),
                ("titulo_en", models.CharField(max_length=200, null=True)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("contenido", models.TextField()),
                ("contenido_es", models.TextField(null=True)),
                ("contenido_en", models.TextField(null=True)),
                (
                    "imagen_principal",
                    models.ImageField(
                        blank=True, null=True, upload_to="publicaciones/"
                    ),
                ),
                (
                    "subcategoria_evento",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CULTURAL", "Cultural"),
                            ("DEPORTIVO", "Deportivo"),
                            ("RELIGIOSO", "Religioso"),
                            ("CIVICO", "Cívico"),
                            ("OTRO", "Otro"),
                        ],
                        help_text="Clasificación específica solo para eventos.",
                        max_length=50,
                        null=True,
                        verbose_name="Subcategoría de Evento",
                    ),
                ),
                ("fecha_evento_inicio", models.DateTimeField(blank=True, null=True)),
                ("fecha_evento_fin", models.DateTimeField(blank=True, null=True)),
                (
                    "puntos_asistencia",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntos otorgados por asistir a esta capacitación (solo si tipo=CAPACITACION).",
                    ),
                ),
                ("fecha_publicacion", models.DateTimeField(auto_now_add=True)),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("BORRADOR", "Borrador"),
                            (
                                "PENDIENTE_DIRECTIVO",
                                "Pendiente de Aprobación por Directivo",
                            ),
                            (
                                "PENDIENTE_ADMIN",
                                "Pendiente de Aprobación por Administrador",
                            ),
                            ("PUBLICADO", "Publicado"),
                        ],
                        db_index=True,
                        default="BORRADOR",
                        help_text="Estado del flujo de aprobación de la publicación.",
                        max_length=20,
                        verbose_name="Estado de Publicación",
                    ),
                ),
                (
                    "autor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="publicaciones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Publicación",
                "verbose_name_plural": "Publicaciones",
                "ordering": ["-fecha_publicacion"],
            },
        ),
        migrations.CreateModel(
            name="Sugerencia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre_remitente",
                    models.CharField(
                        blank=True,
                        help_text="Nombre (si el usuario no está autenticado).",
                        max_length=150,
                    ),
                ),
                (
                    "email_remitente",
                    models.EmailField(
                        blank=True,
                        help_text="Email de contacto (si el usuario no está autenticado).",
                        max_length=254,
                    ),
                ),
                (
                    "tipo_mensaje",
                    models.CharField(
                        choices=[
                            ("SUGERENCIA", "Sugerencia"),
                            ("QUEJA", "Queja"),
                            ("FELICITACION", "Felicitación"),
                        ],
                        default="SUGERENCIA",
                        max_length=20,
                    ),
                ),
                ("mensaje", models.TextField()),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("RECIBIDO", "Recibido"),
                            ("EN_REVISION", "En Revisión"),
                            ("ATENDIDO", "Atendido"),
                        ],
                        default="RECIBIDO",
                        max_length=20,
                    ),
                ),
                ("fecha_envio", models.DateTimeField(auto_now_add=True)),
                (
                    "es_publico",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar si esta sugerencia/felicitación puede ser mostrada públicamente.",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sugerencias_hechas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Sugerencia o Felicitación",
                "verbose_name_plural": "Sugerencias y Felicitaciones",
                "ordering": ["-fecha_envio"],
            },
        ),
        migrations.CreateModel(
            name="Verificacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fecha_visita",
                    models.DateField(
                        help_text="Fecha en que se realizó la visita de verificación."
                    ),
                ),
                (
                    "puntaje_obtenido",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Puntaje total calculado para esta verificación.",
                    ),
                ),
                (
                    "observaciones_generales",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones y comentarios del funcionario evaluador.",
                    ),
                ),
                (
                    "recomendaciones",
                    models.TextField(
                        blank=True,
                        help_text="Recomendaciones para el prestador de servicios.",
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "funcionario_evaluador",
                    models.ForeignKey(
                        limit_choices_to={
                            "role__in": [
                                "ADMIN",
                                "FUNCIONARIO_DIRECTIVO",
                                "FUNCIONARIO_PROFESIONAL",
                            ]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verificaciones_realizadas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "plantilla_usada",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="verificaciones_realizadas",
                        to="api.plantillaverificacion",
                    ),
                ),
                (
                    "prestador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verificaciones_recibidas",
                        to="api.prestadorservicio",
                    ),
                ),
            ],
            options={
                "verbose_name": "Verificación de Cumplimiento",
                "verbose_name_plural": "Verificaciones de Cumplimiento",
                "ordering": ["-fecha_visita"],
            },
        ),
        migrations.CreateModel(
            name="ElementoGuardado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("fecha_guardado", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        limit_choices_to={"role": "TURISTA"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="elementos_guardados",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-fecha_guardado"],
                "unique_together": {("usuario", "content_type", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="AsistenciaCapacitacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fecha_asistencia", models.DateTimeField(auto_now_add=True)),
                (
                    "usuario",
                    models.ForeignKey(
                        limit_choices_to={"role__in": ["PRESTADOR", "ARTESANO"]},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asistencias_capacitaciones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "capacitacion",
                    models.ForeignKey(
                        limit_choices_to={"tipo": "CAPACITACION"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asistentes",
                        to="api.publicacion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Asistencia a Capacitación",
                "verbose_name_plural": "Asistencias a Capacitaciones",
                "unique_together": {("capacitacion", "usuario")},
            },
        ),
        migrations.CreateModel(
            name="Resena",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "calificacion",
                    models.PositiveIntegerField(
                        help_text="Calificación de 1 a 5 estrellas.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("comentario", models.TextField()),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                (
                    "aprobada",
                    models.BooleanField(
                        default=False,
                        help_text="Las reseñas deben ser aprobadas por un administrador para ser visibles.",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resenas_hechas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Reseña y Calificación",
                "verbose_name_plural": "Reseñas y Calificaciones",
                "ordering": ["-fecha_creacion"],
                "unique_together": {("usuario", "content_type", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="RespuestaUsuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "respuesta",
                    models.JSONField(
                        default=dict, help_text="Respuesta del usuario en formato JSON."
                    ),
                ),
                ("fecha_respuesta", models.DateTimeField(auto_now=True)),
                (
                    "pregunta",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="respuestas",
                        to="api.pregunta",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="respuestas_formulario",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Respuesta de Usuario a Formulario",
                "verbose_name_plural": "Respuestas de Usuarios a Formularios",
                "unique_together": {("usuario", "pregunta")},
            },
        ),
        migrations.CreateModel(
            name="RespuestaItemVerificacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cumple",
                    models.BooleanField(
                        default=False,
                        help_text="Marcar si el prestador cumple con este requisito.",
                    ),
                ),
                (
                    "justificacion",
                    models.CharField(
                        blank=True,
                        help_text="Justificación o número de soporte si es necesario (ej. N° de resolución).",
                        max_length=255,
                    ),
                ),
                (
                    "item_original",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="respuestas_dadas",
                        to="api.itemverificacion",
                    ),
                ),
                (
                    "verificacion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="respuestas_items",
                        to="api.verificacion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Respuesta a Ítem de Verificación",
                "verbose_name_plural": "Respuestas a Ítems de Verificación",
                "unique_together": {("verificacion", "item_original")},
            },
        ),
    ]
