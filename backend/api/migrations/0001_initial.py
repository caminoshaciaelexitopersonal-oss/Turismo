# Generated by Django 5.2.6 on 2025-09-25 13:58

import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoriaPrestador",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Versión del nombre amigable para URLs",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Categoría de Prestador",
                "verbose_name_plural": "Categorías de Prestadores",
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titulo", models.CharField(max_length=200)),
                ("descripcion", models.TextField(blank=True)),
                ("url_youtube", models.URLField()),
                ("fecha_publicacion", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrador General"),
                            ("FUNCIONARIO", "Funcionario de Turismo"),
                            ("PRESTADOR", "Prestador de Servicio"),
                        ],
                        default="ADMIN",
                        max_length=50,
                        verbose_name="Rol",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PrestadorServicio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre_negocio", models.CharField(max_length=200)),
                ("descripcion", models.TextField(blank=True, null=True)),
                ("telefono", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "email_contacto",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("red_social_facebook", models.URLField(blank=True, null=True)),
                ("red_social_instagram", models.URLField(blank=True, null=True)),
                (
                    "red_social_whatsapp",
                    models.CharField(
                        blank=True,
                        help_text="Número de WhatsApp con código de país",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ubicacion_mapa",
                    models.CharField(
                        blank=True,
                        help_text="Coordenadas (lat,lng) o dirección",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "promociones_ofertas",
                    models.TextField(
                        blank=True,
                        help_text="Detalles de promociones, menús, paquetes, etc.",
                        null=True,
                    ),
                ),
                (
                    "aprobado",
                    models.BooleanField(
                        default=False,
                        help_text="El administrador debe aprobar este perfil para que sea visible.",
                    ),
                ),
                (
                    "reporte_ocupacion_nacional",
                    models.PositiveIntegerField(
                        default=0, help_text="Exclusivo para hoteles"
                    ),
                ),
                (
                    "reporte_ocupacion_internacional",
                    models.PositiveIntegerField(
                        default=0, help_text="Exclusivo para hoteles"
                    ),
                ),
                ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_actualizacion", models.DateTimeField(auto_now=True)),
                (
                    "categoria",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="prestadores",
                        to="api.categoriaprestador",
                    ),
                ),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil_prestador",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Prestador de Servicio",
                "verbose_name_plural": "Prestadores de Servicios",
            },
        ),
        migrations.CreateModel(
            name="ImagenGaleria",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "imagen",
                    models.ImageField(upload_to=api.models.galeria_directory_path),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Texto alternativo para accesibilidad",
                        max_length=255,
                    ),
                ),
                (
                    "prestador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="galeria_imagenes",
                        to="api.prestadorservicio",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentoLegalizacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "documento",
                    models.FileField(upload_to=api.models.documentos_directory_path),
                ),
                ("nombre_documento", models.CharField(max_length=100)),
                ("fecha_subida", models.DateTimeField(auto_now_add=True)),
                (
                    "prestador",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documentos_legalizacion",
                        to="api.prestadorservicio",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Publicacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("EVENTO", "Evento"),
                            ("NOTICIA", "Noticia"),
                            ("BLOG", "Blog"),
                        ],
                        max_length=20,
                    ),
                ),
                ("titulo", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("contenido", models.TextField()),
                (
                    "imagen_principal",
                    models.ImageField(
                        blank=True, null=True, upload_to="publicaciones/"
                    ),
                ),
                ("fecha_evento_inicio", models.DateTimeField(blank=True, null=True)),
                ("fecha_evento_fin", models.DateTimeField(blank=True, null=True)),
                ("fecha_publicacion", models.DateTimeField(auto_now_add=True)),
                ("es_publicado", models.BooleanField(default=True)),
                (
                    "autor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="publicaciones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Publicación",
                "verbose_name_plural": "Publicaciones",
                "ordering": ["-fecha_publicacion"],
            },
        ),
    ]
