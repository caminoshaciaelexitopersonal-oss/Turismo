import json
from typing import TypedDict, Any, List
from langchain_core.pydantic_v1 import BaseModel, Field
from langgraph.graph import StateGraph, END
from api.llm_router import route_llm_request

# --- Importamos a los comandantes de escuadra: los Sargentos Especialistas ---
from .squads.gestion_hoteles_sargento import get_gestion_hoteles_sargento_graph
from .squads.gestion_restaurantes_sargento import get_gestion_restaurantes_sargento_graph
from .squads.gestion_guias_sargento import get_gestion_guias_sargento_graph
from .squads.gestion_agencias_sargento import get_gestion_agencias_sargento_graph
from .squads.gestion_transporte_sargento import get_gestion_transporte_sargento_graph
from .squads.gestion_prestador_sargento import get_gestion_prestador_sargento_graph

# --- DEFINICI√ìN DEL ESTADO Y EL PLAN T√ÅCTICO DEL TENIENTE ---

class SargentoTask(BaseModel):
    """Define una misi√≥n espec√≠fica para ser asignada a un Sargento especialista."""
    task_description: str = Field(description="La descripci√≥n detallada de la misi√≥n para el Sargento.")
    responsible_sargento: str = Field(
        description="El Sargento especialista. Debe ser uno de: 'Hoteles', 'Restaurantes', 'Guias', 'Agencias', 'Transporte', 'Generico'."
    )

class SargentoPlan(BaseModel):
    """El plan de escuadra generado por el Teniente para cumplir la orden del Capit√°n."""
    plan: List[SargentoTask] = Field(description="La lista de misiones para los Sargentos.")

class PrestadoresLieutenantState(TypedDict):
    """La pizarra t√°ctica del Teniente de Prestadores."""
    captain_order: str
    app_context: Any
    sargento_plan: SargentoPlan | None
    task_queue: List[SargentoTask]
    completed_missions: list
    final_report: str
    error: str | None

# --- PUESTO DE MANDO: INSTANCIACI√ìN DE SARGENTOS ---
# Se instancian una sola vez para eficiencia
sargentos = {
    "Hoteles": get_gestion_hoteles_sargento_graph(),
    "Restaurantes": get_gestion_restaurantes_sargento_graph(),
    "Guias": get_gestion_guias_sargento_graph(),
    "Agencias": get_gestion_agencias_sargento_graph(),
    "Transporte": get_gestion_transporte_sargento_graph(),
    "Generico": get_gestion_prestador_sargento_graph(),
}

# --- NODOS DEL GRAFO ORQUESTADOR DEL TENIENTE ---

async def create_sargento_plan(state: PrestadoresLieutenantState) -> PrestadoresLieutenantState:
    """(NODO 1: PLANIFICADOR) Analiza la orden del Capit√°n, la enruta al LLM adecuado y la descompone en misiones para los Sargentos."""
    print("--- üß† TTE. PRESTADORES: Creando Plan de Escuadra... ---")

    user = state['app_context'].get('user')
    # El historial de conversaci√≥n se pasa vac√≠o ya que el Teniente inicia un nuevo sub-plan.
    conversation_history = []

    prompt = f"""
Eres un Teniente de Prestadores de Servicios Tur√≠sticos. Tu Capit√°n te ha dado una orden.
Tu deber es descomponerla en un plan t√°ctico, asignando cada misi√≥n al Sargento especialista correcto.
Debes devolver SIEMPRE una respuesta en formato JSON v√°lido, siguiendo la estructura de la clase `SargentoPlan`.

Sargentos bajo tu mando y sus especialidades:
- 'Hoteles': Gestiona todo lo relacionado con hoteles, hostales, etc.
- 'Restaurantes': Gestiona restaurantes, caf√©s, etc.
- 'Guias': Gestiona gu√≠as de turismo.
- 'Agencias': Gestiona agencias de viajes.
- 'Transporte': Gestiona empresas de transporte tur√≠stico.
- 'Generico': Usa este sargento para tareas generales sobre prestadores que no encajan en una especialidad.

Analiza la orden de tu Capit√°n y genera el plan de escuadra en formato JSON:
"{state['captain_order']}"
"""
    try:
        # --- INVOCACI√ìN DEL ROUTER H√çBRIDO ---
        llm_response_str = route_llm_request(prompt, conversation_history, user)
        llm_response_json = json.loads(llm_response_str)
        plan = SargentoPlan.parse_obj(llm_response_json)

        state.update({
            "sargento_plan": plan,
            "task_queue": plan.plan.copy(),
            "completed_missions": [],
            "error": None
        })
    except json.JSONDecodeError as e:
        state["error"] = f"Error cr√≠tico (Teniente): El LLM devolvi√≥ un JSON inv√°lido. Respuesta: '{llm_response_str}'. Error: {e}"
    except Exception as e:
        state["error"] = f"No se pudo crear un plan de escuadra: {e}"
    return state

def route_to_sargento(state: PrestadoresLieutenantState):
    """(NODO 2: ENRUTADOR) Lee la siguiente misi√≥n y dirige el flujo al Sargento correcto."""
    if state.get("error") or not state.get("task_queue"):
        return "compile_report"

    next_mission = state["task_queue"][0]
    sargento_unit = next_mission.responsible_sargento

    if sargento_unit in sargentos:
        return sargento_unit
    else:
        # Si el LLM alucina un sargento, se maneja el error y se contin√∫a.
        state["error"] = f"Error de planificaci√≥n: Sargento '{sargento_unit}' desconocido."
        state["task_queue"].pop(0)
        return "route_to_sargento"

# --- NODOS DE DELEGACI√ìN DE MANDO (SUB-GRAFOS) ---

async def delegate_mission(state: PrestadoresLieutenantState, sargento_name: str) -> PrestadoresLieutenantState:
    """Funci√≥n gen√©rica para invocar a cualquier sargento."""
    mission = state["task_queue"].pop(0)
    print(f"--- ü´° TTE. PRESTADORES: Delegando a SGTO. {sargento_name} -> '{mission.task_description}' ---")

    sargento_agent = sargentos[sargento_name]
    result = await sargento_agent.ainvoke({
        "teniente_order": mission.task_description,
        "app_context": state.get('app_context')
    })

    state["completed_missions"].append({
        "sargento": sargento_name,
        "mission": mission.task_description,
        "report": result.get("final_report", "Sin reporte detallado.")
    })
    return state

async def compile_final_report(state: PrestadoresLieutenantState) -> PrestadoresLieutenantState:
    """(NODO FINAL) Sintetiza los reportes de los Sargentos para el Capit√°n."""
    print("--- üìÑ TTE. PRESTADORES: Compilando Informe para el Capit√°n... ---")
    if state.get("error"):
        state["final_report"] = f"Misi√≥n del pelot√≥n fallida. Raz√≥n: {state['error']}"
    else:
        report_body = "\n".join([f"- Reporte del Sgto. de {m['sargento']}:\n  Misi√≥n: '{m['mission']}'\n  Resultado: {m['report']}" for m in state["completed_missions"]])
        state["final_report"] = f"Misi√≥n del pelot√≥n de Prestadores completada.\nResumen de Operaciones:\n{report_body}"
    return state

# --- ENSAMBLAJE DEL GRAFO ORQUESTADOR DEL TENIENTE ---

def get_prestadores_teniente_graph():
    """Construye y compila el agente LangGraph para el Teniente de Prestadores."""
    workflow = StateGraph(PrestadoresLieutenantState)

    workflow.add_node("planner", create_sargento_plan)

    # Nodos de delegaci√≥n para cada sargento
    for name in sargentos.keys():
        workflow.add_node(name, lambda state, s_name=name: delegate_mission(state, s_name))
        workflow.add_edge(name, "router")

    workflow.add_node("compiler", compile_final_report)
    workflow.add_node("router", lambda state: state) # Nodo 'passthrough' para el enrutador

    workflow.set_entry_point("planner")
    workflow.add_edge("planner", "router")

    workflow.add_conditional_edges("router", route_to_sargento, {
        **{name: name for name in sargentos.keys()}, # Rutas a cada sargento
        "compile_report": "compiler"
    })

    workflow.add_edge("compiler", END)

    print("‚úÖ Doctrina aplicada: Teniente Orquestador de Prestadores compilado y listo.")
    return workflow.compile()