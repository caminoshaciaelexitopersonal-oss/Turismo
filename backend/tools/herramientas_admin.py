from langchain_core.tools import tool
from typing import List, Dict, Optional
from api.models import (
    CustomUser,
    SiteConfiguration,
    MenuItem,
    HomePageComponent,
    Resena,
    Sugerencia,
    AuditLog,
    ScoringRule
)
from django.core.exceptions import ObjectDoesNotExist

# --- SOLDADOS DE GESTI칍N DE USUARIOS ---

@tool
def crear_usuario(email: str, nombre_usuario: str, rol: str) -> Dict:
    """
    (SOLDADO DE RECLUTAMIENTO) Crea un nuevo usuario en el sistema con un rol espec칤fico.
    `rol` debe ser uno de los valores v치lidos en CustomUser.Role (ej. 'FUNCIONARIO_DIRECTIVO').
    La contrase침a inicial es temporal y se recomienda al usuario cambiarla.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! Creando usuario {email} con rol {rol}. ---")
    if rol not in CustomUser.Role.values:
        return {"status": "error", "message": f"Rol '{rol}' inv치lido. V치lidos: {CustomUser.Role.labels}"}
    try:
        if CustomUser.objects.filter(email=email).exists():
            return {"status": "error", "message": "El email ya est치 en uso."}

        user = CustomUser.objects.create_user(
            username=nombre_usuario,
            email=email,
            role=rol
        )
        user.set_password("temporal12345")
        user.save()
        return {"status": "success", "user_id": user.id, "message": "Usuario creado con contrase침a temporal."}
    except Exception as e:
        return {"status": "error", "message": f"Error al crear usuario: {e}"}

@tool
def actualizar_rol_usuario(user_id: int, nuevo_rol: str) -> Dict:
    """
    (SOLDADO DE PROMOCI칍N) Actualiza el rol de un usuario existente.
    `nuevo_rol` debe ser uno de los valores v치lidos en CustomUser.Role.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! Cambiando rol del usuario {user_id} a {nuevo_rol}. ---")
    if nuevo_rol not in CustomUser.Role.values:
        return {"status": "error", "message": f"Rol '{nuevo_rol}' inv치lido. V치lidos: {CustomUser.Role.labels}"}
    try:
        user = CustomUser.objects.get(id=user_id)
        user.role = nuevo_rol
        user.save(update_fields=['role'])
        return {"status": "success", "message": f"Rol del usuario '{user.username}' actualizado a {user.get_role_display()}."}
    except ObjectDoesNotExist:
        return {"status": "error", "message": f"Usuario con ID {user_id} no encontrado."}

# --- SOLDADOS DE CONFIGURACI칍N DEL SITIO ---

@tool
def actualizar_configuracion_sitio(**kwargs) -> Dict:
    """
    (SOLDADO DE INGENIER칈A) Actualiza la configuraci칩n general del sitio.
    Acepta como argumentos los nombres de los campos del modelo SiteConfiguration,
    como `nombre_entidad_principal`, `correo_institucional`, `social_facebook`, etc.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! Actualizando la configuraci칩n del sitio. ---")
    try:
        config = SiteConfiguration.load()
        for key, value in kwargs.items():
            if hasattr(config, key):
                setattr(config, key, value)
        config.save()
        return {"status": "success", "message": "Configuraci칩n del sitio actualizada."}
    except Exception as e:
        return {"status": "error", "message": f"Error al actualizar la configuraci칩n: {e}"}

@tool
def actualizar_reglas_puntuacion(**kwargs) -> Dict:
    """
    (SOLDADO DE ESTRATEGIA) Actualiza las reglas de puntuaci칩n del sistema.
    Acepta: `puntos_asistencia_capacitacion`, `puntos_por_estrella_rese침a`, `puntos_completar_formulario`.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! Actualizando reglas de puntuaci칩n. ---")
    try:
        rules = ScoringRule.load()
        for key, value in kwargs.items():
            if hasattr(rules, key):
                setattr(rules, key, value)
        rules.save()
        return {"status": "success", "message": "Reglas de puntuaci칩n actualizadas."}
    except Exception as e:
        return {"status": "error", "message": f"Error al actualizar las reglas: {e}"}

# --- SOLDADOS DE MODERACI칍N Y SUPERVISI칍N ---

@tool
def aprobar_resena(resena_id: int, aprobar: bool) -> Dict:
    """
    (SOLDADO DE MODERACI칍N) Aprueba o desaprueba una rese침a dejada por un turista.
    Solo las rese침as aprobadas son visibles y cuentan para la puntuaci칩n.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! {'Aprobando' if aprobar else 'Rechazando'} rese침a ID {resena_id}. ---")
    try:
        resena = Resena.objects.get(id=resena_id)
        resena.aprobada = aprobar
        resena.save(update_fields=['aprobada'])
        # La se침al post_save en el modelo Resena se encargar치 de recalcular la puntuaci칩n.
        estado = "aprobada" if aprobar else "rechazada"
        return {"status": "success", "message": f"La rese침a ha sido {estado}."}
    except ObjectDoesNotExist:
        return {"status": "error", "message": f"Rese침a con ID {resena_id} no encontrada."}

@tool
def ver_registros_auditoria(limite: int = 20) -> Dict:
    """
    (SOLDADO DE VIGILANCIA) Consulta y devuelve los 칰ltimos N registros de la bit치cora de auditor칤a.
    """
    print(f"--- 游눤 SOLDADO (Admin): 춰ACCI칍N! Consultando los 칰ltimos {limite} registros de auditor칤a. ---")
    try:
        logs = AuditLog.objects.select_related('user').order_by('-timestamp')[:limite]
        registros = [
            {
                "fecha": log.timestamp.isoformat(),
                "usuario": log.user.username if log.user else "Sistema",
                "accion": log.get_action_display(),
                "detalles": log.details
            }
            for log in logs
        ]
        return {"status": "success", "registros": registros}
    except Exception as e:
        return {"status": "error", "message": f"Error al consultar auditor칤a: {e}"}


def get_admin_soldiers() -> List:
    """ Recluta y devuelve la Escuadra de Administraci칩n completa. """
    return [
        crear_usuario,
        actualizar_rol_usuario,
        actualizar_configuracion_sitio,
        actualizar_reglas_puntuacion,
        aprobar_resena,
        ver_registros_auditoria,
    ]